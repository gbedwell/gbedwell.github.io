<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-06-16T11:11:35-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Undefined Functions</title><subtitle></subtitle><author><name>Greg Bedwell</name><email>gregoryjbedwell@gmail.com</email></author><entry><title type="html">The ECF, the 3 point shot, and empirical Bayes</title><link href="http://localhost:4000/ecf-three/" rel="alternate" type="text/html" title="The ECF, the 3 point shot, and empirical Bayes" /><published>2023-06-13T00:00:00-04:00</published><updated>2023-06-13T00:00:00-04:00</updated><id>http://localhost:4000/ecf-three</id><content type="html" xml:base="http://localhost:4000/ecf-three/"><![CDATA[<p>The 2022-2023 NBA playoffs have come to an end. The Denver Nuggets, this
season’s Western Conference champions and Finals favorites, have
defeated the never-say-die Miami Heat 4 games to 1. The Nuggets, led by
the virtually unstoppable Nikola Jokíc (who <i>averaged</i> a triple
double per game in these playoffs), made relatively easy work of the
(not your typical) 8-seed Heat. Nevertheless, the Heat’s impressive, and
at times utterly dominant, run through both the 1-seed Milwaukee Bucks
(4-1) and the 2-seed Boston Celtics (4-3) has already had <a href="https://www.nba.com/bucks/news/milwaukee-bucks-part-ways-with-head-coach-mike-budenholzer">significant
consequences</a>
and could yet have more.</p>

<p>In the Eastern Conference Finals against the Celtics, the Heat
overturned double-digit deficits in the second halves of both Games 1
and 2 and went on to win them both. Game 3 was an emphatic 128-102 Heat
victory. The Celtics won the next 3 games, evening the series at three
games each and forcing a deciding Game 7. Back in Boston, the Heat
absolutely embarrassed the home team and silenced the TD Garden crowd
with a 103-84 victory. Much has been said about how this ECF played out.
Most of this commentary can be succinctly summarized as the Heat having
“that dawg in ’em”, while the Celtics decidedly did not. Another, more
tangible, aspect of the series, however, was the apparent difference in
3 point shooting percentage between the Heat and the Celtics. Per
<a href="https://www.basketball-reference.com/">basketball-reference</a>, the
Celtics rode the three point shot to 57 wins over the 2022-2023 NBA
season, shooting 42.6 threes per game (2nd overall) with a season
average 37.7% success rate (6th overall). The Heat, on the other hand,
shot 34.8 threes per game (10th overall) with a measly 34.4% success
rate (27th overall). During the ECF, however, the Heat shot 43.4% from
behind the arc, while the Celtics shot just 30.3%. On the surface, this
seems like a staggering reversal. However, there is inherent randomness
to shooting. Even the best three point shooters will have hot and cold
streaks. Over the course of a 7 game series, these streaks can be the
difference between moving on and going home. Importantly, the impact of
this randomness is greater for smaller sample sizes than for larger
ones.</p>

<p>With this in mind, I want to try to answer the following questions:</p>

<ol>
  <li>How much better was the Heat’s 3 point shooting percentage in the
ECF relative to their regular season performance?</li>
  <li>How much worse was the Celtics?</li>
</ol>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># library(lubridate)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">rvest</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt; </span><span class="w">
</span><span class="c1">#&gt; Attaching package: 'dplyr'</span><span class="w">
</span><span class="c1">#&gt; The following objects are masked from 'package:stats':</span><span class="w">
</span><span class="c1">#&gt; </span><span class="w">
</span><span class="c1">#&gt;     filter, lag</span><span class="w">
</span><span class="c1">#&gt; The following objects are masked from 'package:base':</span><span class="w">
</span><span class="c1">#&gt; </span><span class="w">
</span><span class="c1">#&gt;     intersect, setdiff, setequal, union</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">tibble</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">tidyr</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">ggplot2</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">gamlss</span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt; Loading required package: splines</span><span class="w">
</span><span class="c1">#&gt; Loading required package: gamlss.data</span><span class="w">
</span><span class="c1">#&gt; </span><span class="w">
</span><span class="c1">#&gt; Attaching package: 'gamlss.data'</span><span class="w">
</span><span class="c1">#&gt; The following object is masked from 'package:datasets':</span><span class="w">
</span><span class="c1">#&gt; </span><span class="w">
</span><span class="c1">#&gt;     sleep</span><span class="w">
</span><span class="c1">#&gt; Loading required package: gamlss.dist</span><span class="w">
</span><span class="c1">#&gt; Loading required package: MASS</span><span class="w">
</span><span class="c1">#&gt; </span><span class="w">
</span><span class="c1">#&gt; Attaching package: 'MASS'</span><span class="w">
</span><span class="c1">#&gt; The following object is masked from 'package:dplyr':</span><span class="w">
</span><span class="c1">#&gt; </span><span class="w">
</span><span class="c1">#&gt;     select</span><span class="w">
</span><span class="c1">#&gt; Loading required package: nlme</span><span class="w">
</span><span class="c1">#&gt; </span><span class="w">
</span><span class="c1">#&gt; Attaching package: 'nlme'</span><span class="w">
</span><span class="c1">#&gt; The following object is masked from 'package:dplyr':</span><span class="w">
</span><span class="c1">#&gt; </span><span class="w">
</span><span class="c1">#&gt;     collapse</span><span class="w">
</span><span class="c1">#&gt; Loading required package: parallel</span><span class="w">
</span><span class="c1">#&gt;  **********   GAMLSS Version 5.4-12  **********</span><span class="w">
</span><span class="c1">#&gt; For more on GAMLSS look at https://www.gamlss.com/</span><span class="w">
</span><span class="c1">#&gt; Type gamlssNews() to see new features/changes/bug fixes.</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">broom.mixed</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">player.dat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">lapply</span><span class="p">(</span><span class="w"> </span><span class="n">X</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">as.list</span><span class="p">(</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="w"> </span><span class="s2">"202"</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="o">:</span><span class="m">3</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">),</span><span class="w">
                      </span><span class="n">FUN</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">){</span><span class="w">
                        </span><span class="n">url</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="w"> </span><span class="s2">"https://www.basketball-reference.com/leagues/NBA_"</span><span class="p">,</span><span class="w"> 
                                       </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="s2">"_totals.html"</span><span class="w"> </span><span class="p">)</span><span class="w">
                        </span><span class="n">page</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_html</span><span class="p">(</span><span class="w"> </span><span class="n">url</span><span class="w"> </span><span class="p">)</span><span class="w">
                        
                        </span><span class="n">cols</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">page</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
                          </span><span class="n">html_nodes</span><span class="p">(</span><span class="s2">"table#totals_stats &gt; thead &gt; tr &gt; th"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
                          </span><span class="n">html_text</span><span class="p">()</span><span class="w">
                        
                        </span><span class="n">cols</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cols</span><span class="p">[</span><span class="w"> </span><span class="o">-</span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="w"> </span><span class="p">]</span><span class="w">
                        
                        </span><span class="n">dat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="w"> 
                          </span><span class="n">t</span><span class="p">(</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">page</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
                                       </span><span class="n">html_nodes</span><span class="p">(</span><span class="s2">"table#totals_stats &gt; tbody &gt; tr &gt; td"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
                                       </span><span class="n">html_text</span><span class="p">(),</span><span class="w">
                                     </span><span class="n">nrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">29</span><span class="w"> </span><span class="p">)</span><span class="w">
                             </span><span class="p">)</span><span class="w"> 
                          </span><span class="p">)</span><span class="w">
                        </span><span class="n">colnames</span><span class="p">(</span><span class="w"> </span><span class="n">dat</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cols</span><span class="w">
                        
                        </span><span class="n">dat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dat</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
                          </span><span class="n">dplyr</span><span class="o">::</span><span class="n">mutate</span><span class="p">(</span><span class="w"> </span><span class="n">Age</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">as.numeric</span><span class="p">(</span><span class="w"> </span><span class="n">Age</span><span class="w"> </span><span class="p">),</span><span class="w">
                                         </span><span class="n">across</span><span class="p">(</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">5</span><span class="o">:</span><span class="m">29</span><span class="p">),</span><span class="w"> </span><span class="n">as.numeric</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
                          </span><span class="n">tibble</span><span class="o">::</span><span class="n">add_column</span><span class="p">(</span><span class="w"> </span><span class="n">Season</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">as.numeric</span><span class="p">(</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="p">),</span><span class="w"> </span><span class="n">.after</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="w"> </span><span class="p">)</span><span class="w">
                        </span><span class="p">}</span><span class="w">
                      </span><span class="p">)</span><span class="w">

</span><span class="n">player.dat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">do.call</span><span class="p">(</span><span class="w"> </span><span class="n">rbind</span><span class="p">,</span><span class="w"> </span><span class="n">player.dat</span><span class="w"> </span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">three.dat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">player.dat</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">select</span><span class="p">(</span><span class="w"> </span><span class="n">Player</span><span class="p">,</span><span class="w"> </span><span class="n">Season</span><span class="p">,</span><span class="w"> </span><span class="n">Tm</span><span class="p">,</span><span class="w"> </span><span class="n">MP</span><span class="p">,</span><span class="w"> </span><span class="n">`3P`</span><span class="p">,</span><span class="w"> </span><span class="n">`3PA`</span><span class="p">,</span><span class="w"> </span><span class="n">`3P%`</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">tidyr</span><span class="o">::</span><span class="n">drop_na</span><span class="p">()</span><span class="w">
</span></code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fit</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">gamlss</span><span class="p">(</span><span class="w"> </span><span class="n">cbind</span><span class="p">(</span><span class="n">`3P`</span><span class="p">,</span><span class="w"> </span><span class="n">`3PA`</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">`3P`</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="nf">log</span><span class="p">(</span><span class="w"> </span><span class="n">`3PA`</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">,</span><span class="w">
               </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">three.dat</span><span class="p">,</span><span class="w">
               </span><span class="n">family</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">BB</span><span class="p">(</span><span class="w"> </span><span class="n">mu.link</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"identity"</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt; GAMLSS-RS iteration 1: Global Deviance = 17705.38 </span><span class="w">
</span><span class="c1">#&gt; GAMLSS-RS iteration 2: Global Deviance = 14796.71 </span><span class="w">
</span><span class="c1">#&gt; GAMLSS-RS iteration 3: Global Deviance = 14764.15 </span><span class="w">
</span><span class="c1">#&gt; GAMLSS-RS iteration 4: Global Deviance = 14764.15 </span><span class="w">
</span><span class="c1">#&gt; GAMLSS-RS iteration 5: Global Deviance = 14764.15</span><span class="w">

</span><span class="n">plot</span><span class="p">(</span><span class="w"> </span><span class="n">fit</span><span class="w"> </span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../figures/2023-06-13/unnamed-chunk-5-1.png" width="80%" style="display: block; margin: auto;" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#&gt; ******************************************************************
#&gt;   Summary of the Randomised Quantile Residuals
#&gt;                            mean   =  -0.01271775 
#&gt;                        variance   =  1.017853 
#&gt;                coef. of skewness  =  0.03850354 
#&gt;                coef. of kurtosis  =  3.054804 
#&gt; Filliben correlation coefficient  =  0.999368 
#&gt; ******************************************************************
# tidy(fit)
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">three.dat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">three.dat</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">mutate</span><span class="p">(</span><span class="w"> </span><span class="n">mu</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fitted</span><span class="p">(</span><span class="w"> </span><span class="n">fit</span><span class="p">,</span><span class="w"> </span><span class="n">parameter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"mu"</span><span class="w"> </span><span class="p">),</span><span class="w">
                 </span><span class="n">sigma</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fitted</span><span class="p">(</span><span class="w"> </span><span class="n">fit</span><span class="p">,</span><span class="w"> </span><span class="n">parameter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"sigma"</span><span class="w"> </span><span class="p">),</span><span class="w">
                 </span><span class="n">alpha0</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mu</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">sigma</span><span class="p">,</span><span class="w">
                 </span><span class="n">beta0</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="m">1</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">mu</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">sigma</span><span class="p">,</span><span class="w">
                 </span><span class="n">alphai</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">alpha0</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">`3P`</span><span class="p">,</span><span class="w">
                 </span><span class="n">betai</span><span class="w"> </span><span class="o">=</span><span class="w">  </span><span class="n">beta0</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">`3PA`</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">`3P`</span><span class="p">,</span><span class="w">
                 </span><span class="n">eb</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">alphai</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">alphai</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">betai</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ggplot</span><span class="p">(</span><span class="w"> </span><span class="n">three.dat</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">`3P%`</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">eb</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">`3PA`</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_point</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">shape</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">21</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#00000000"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> 
  </span><span class="n">scale_fill_gradient</span><span class="p">(</span><span class="s2">"3P Attempts"</span><span class="p">,</span><span class="w">
                      </span><span class="n">guide</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">guide_colorbar</span><span class="p">(</span><span class="n">title.position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"top"</span><span class="p">,</span><span class="w">
                                             </span><span class="n">nrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w">
                                             </span><span class="n">title.hjust</span><span class="o">=</span><span class="m">0.5</span><span class="p">,</span><span class="w">
                                             </span><span class="n">ticks.colour</span><span class="o">=</span><span class="s2">"black"</span><span class="p">,</span><span class="w">
                                             </span><span class="n">ticks.linewidth</span><span class="o">=</span><span class="m">1</span><span class="p">,</span><span class="w">
                                             </span><span class="n">frame.colour</span><span class="o">=</span><span class="s2">"black"</span><span class="p">,</span><span class="w">
                                             </span><span class="n">frame.linewidth</span><span class="o">=</span><span class="m">0.5</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme_bw</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="w"> </span><span class="n">legend.position</span><span class="o">=</span><span class="s2">"top"</span><span class="p">,</span><span class="w">
         </span><span class="n">legend.key.size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unit</span><span class="p">(</span><span class="m">0.3</span><span class="p">,</span><span class="w"> </span><span class="s2">"cm"</span><span class="p">),</span><span class="w">
         </span><span class="n">legend.key.width</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unit</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="s2">"cm"</span><span class="p">),</span><span class="w">
         </span><span class="n">legend.text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="m">10</span><span class="p">),</span><span class="w">
         </span><span class="n">legend.title</span><span class="o">=</span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="m">12</span><span class="p">),</span><span class="w">
         </span><span class="n">legend.box.margin</span><span class="o">=</span><span class="n">margin</span><span class="p">(</span><span class="m">-10</span><span class="p">,</span><span class="m">-10</span><span class="p">,</span><span class="m">-10</span><span class="p">,</span><span class="m">-10</span><span class="p">),</span><span class="w">
         </span><span class="n">legend.justification</span><span class="o">=</span><span class="s2">"center"</span><span class="p">,</span><span class="w">
         </span><span class="n">axis.text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">14</span><span class="w"> </span><span class="p">),</span><span class="w">
         </span><span class="n">axis.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">16</span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">labs</span><span class="p">(</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"3P%"</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Adjusted 3P%"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../figures/2023-06-13/unnamed-chunk-7-1.png" width="80%" style="display: block; margin: auto;" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="w"> </span><span class="n">ggpointdensity</span><span class="w"> </span><span class="p">)</span><span class="w">

</span><span class="n">ggplot</span><span class="p">(</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">three.dat</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">`3PA`</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">`3P%`</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_hline</span><span class="p">(</span><span class="w"> </span><span class="n">yintercept</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mean</span><span class="p">(</span><span class="w"> </span><span class="n">three.dat</span><span class="o">$</span><span class="n">`3P%`</span><span class="w"> </span><span class="p">),</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"black"</span><span class="p">,</span><span class="w"> </span><span class="n">linewidth</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.5</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> 
  </span><span class="n">geom_pointdensity</span><span class="p">(</span><span class="w"> </span><span class="n">adjust</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="c1"># geom_point( aes( x = `3PA`, y = eb ), color = "purple", alpha = 0.5 ) +</span><span class="w">
  </span><span class="n">scale_color_gradient</span><span class="p">(</span><span class="n">guide</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">guide_colorbar</span><span class="p">(</span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Nearest Neighbors"</span><span class="p">,</span><span class="w">
                                              </span><span class="n">title.position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"top"</span><span class="p">,</span><span class="w">
                                              </span><span class="n">nrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w">
                                              </span><span class="n">title.hjust</span><span class="o">=</span><span class="m">0.5</span><span class="p">,</span><span class="w">
                                              </span><span class="n">ticks.colour</span><span class="o">=</span><span class="s2">"black"</span><span class="p">,</span><span class="w">
                                              </span><span class="n">ticks.linewidth</span><span class="o">=</span><span class="m">1</span><span class="p">,</span><span class="w">
                                              </span><span class="n">frame.colour</span><span class="o">=</span><span class="s2">"black"</span><span class="p">,</span><span class="w">
                                              </span><span class="n">frame.linewidth</span><span class="o">=</span><span class="m">0.5</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_line</span><span class="p">(</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">`3PA`</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">`mu`</span><span class="w"> </span><span class="p">),</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"red"</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme_bw</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="w"> </span><span class="n">legend.position</span><span class="o">=</span><span class="s2">"top"</span><span class="p">,</span><span class="w">
         </span><span class="n">legend.key.size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unit</span><span class="p">(</span><span class="m">0.3</span><span class="p">,</span><span class="w"> </span><span class="s2">"cm"</span><span class="p">),</span><span class="w">
         </span><span class="n">legend.key.width</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unit</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="s2">"cm"</span><span class="p">),</span><span class="w">
         </span><span class="n">legend.text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="m">10</span><span class="p">),</span><span class="w">
         </span><span class="n">legend.title</span><span class="o">=</span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="m">12</span><span class="p">),</span><span class="w">
         </span><span class="n">legend.box.margin</span><span class="o">=</span><span class="n">margin</span><span class="p">(</span><span class="m">-10</span><span class="p">,</span><span class="m">-10</span><span class="p">,</span><span class="m">-10</span><span class="p">,</span><span class="m">-10</span><span class="p">),</span><span class="w">
         </span><span class="n">legend.justification</span><span class="o">=</span><span class="s2">"center"</span><span class="p">,</span><span class="w">
         </span><span class="n">axis.text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">14</span><span class="w"> </span><span class="p">),</span><span class="w">
         </span><span class="n">axis.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">16</span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">labs</span><span class="p">(</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"3P Attempts"</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"3P%"</span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt; Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.</span><span class="w">
</span><span class="c1">#&gt; ℹ Please use `linewidth` instead.</span><span class="w">
</span><span class="c1">#&gt; This warning is displayed once every 8 hours.</span><span class="w">
</span><span class="c1">#&gt; Call `lifecycle::last_lifecycle_warnings()` to see where this warning was</span><span class="w">
</span><span class="c1">#&gt; generated.</span><span class="w">
</span></code></pre></div></div>

<p><img src="../figures/2023-06-13/unnamed-chunk-8-1.png" width="80%" style="display: block; margin: auto;" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">year</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"2023"</span><span class="w">
</span><span class="n">playoff.url</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="w"> </span><span class="s2">"https://www.basketball-reference.com/playoffs/NBA_"</span><span class="p">,</span><span class="w"> </span><span class="n">year</span><span class="p">,</span><span class="w"> </span><span class="s2">"_totals.html"</span><span class="w"> </span><span class="p">)</span><span class="w">
</span><span class="n">playoff.page</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_html</span><span class="p">(</span><span class="w"> </span><span class="n">playoff.url</span><span class="w"> </span><span class="p">)</span><span class="w">

</span><span class="n">playoff.cols</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">playoff.page</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">html_nodes</span><span class="p">(</span><span class="s2">"table#totals_stats &gt; thead &gt; tr &gt; th"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">html_text</span><span class="p">()</span><span class="w">

</span><span class="n">playoff.cols</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">playoff.cols</span><span class="p">[</span><span class="w"> </span><span class="o">-</span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="w"> </span><span class="p">]</span><span class="w">

</span><span class="n">playoff.dat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="w"> 
  </span><span class="n">t</span><span class="p">(</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">playoff.page</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
               </span><span class="n">html_nodes</span><span class="p">(</span><span class="s2">"table#totals_stats &gt; tbody &gt; tr &gt; td"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
               </span><span class="n">html_text</span><span class="p">(),</span><span class="w">
             </span><span class="n">nrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">29</span><span class="w"> </span><span class="p">)</span><span class="w">
     </span><span class="p">)</span><span class="w"> 
  </span><span class="p">)</span><span class="w">

</span><span class="n">colnames</span><span class="p">(</span><span class="w"> </span><span class="n">playoff.dat</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">playoff.cols</span><span class="w">

</span><span class="n">playoff.dat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">playoff.dat</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">mutate</span><span class="p">(</span><span class="w"> </span><span class="n">Age</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">as.numeric</span><span class="p">(</span><span class="w"> </span><span class="n">Age</span><span class="w"> </span><span class="p">),</span><span class="w">
                 </span><span class="n">across</span><span class="p">(</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">5</span><span class="o">:</span><span class="m">29</span><span class="p">),</span><span class="w"> </span><span class="n">as.numeric</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">tibble</span><span class="o">::</span><span class="n">add_column</span><span class="p">(</span><span class="w"> </span><span class="n">Season</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2023</span><span class="p">,</span><span class="w"> </span><span class="n">.after</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="w"> </span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">playoff.threes</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">playoff.dat</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">select</span><span class="p">(</span><span class="w"> </span><span class="n">Player</span><span class="p">,</span><span class="w"> </span><span class="n">Season</span><span class="p">,</span><span class="w"> </span><span class="n">Tm</span><span class="p">,</span><span class="w"> </span><span class="n">MP</span><span class="p">,</span><span class="w"> </span><span class="n">`3P`</span><span class="p">,</span><span class="w"> </span><span class="n">`3PA`</span><span class="p">,</span><span class="w"> </span><span class="n">`3P%`</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">tidyr</span><span class="o">::</span><span class="n">drop_na</span><span class="p">()</span><span class="w">

</span><span class="n">coefs</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tidy</span><span class="p">(</span><span class="n">fit</span><span class="p">)</span><span class="o">$</span><span class="n">estimate</span><span class="w">

</span><span class="n">playoff.threes</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">playoff.threes</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">mutate</span><span class="p">(</span><span class="w"> </span><span class="n">mu</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">coefs</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">coefs</span><span class="p">[</span><span class="m">2</span><span class="p">]</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">log</span><span class="p">(</span><span class="w"> </span><span class="n">`3PA`</span><span class="w"> </span><span class="p">),</span><span class="w">
                 </span><span class="n">sigma</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">exp</span><span class="p">(</span><span class="w"> </span><span class="n">coefs</span><span class="p">[</span><span class="m">3</span><span class="p">]</span><span class="w"> </span><span class="p">),</span><span class="w">
                 </span><span class="n">alpha0</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mu</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">sigma</span><span class="p">,</span><span class="w">
                 </span><span class="n">beta0</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="m">1</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">mu</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">sigma</span><span class="p">,</span><span class="w">
                 </span><span class="n">alphai</span><span class="w">  </span><span class="o">=</span><span class="w"> </span><span class="n">alpha0</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">`3P`</span><span class="p">,</span><span class="w">
                 </span><span class="n">betai</span><span class="w"> </span><span class="o">=</span><span class="w">  </span><span class="n">beta0</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">`3PA`</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">`3P`</span><span class="p">,</span><span class="w">
                 </span><span class="n">eb</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">alphai</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">alphai</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">betai</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">poi</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="w"> </span><span class="s2">"Gabe Vincent"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Max Strus"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Duncan Robinson"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Caleb Martin"</span><span class="w"> </span><span class="p">)</span><span class="w">

</span><span class="n">heat.reg</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">three.dat</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">filter</span><span class="p">(</span><span class="w"> </span><span class="n">Player</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="n">poi</span><span class="p">,</span><span class="w"> </span><span class="n">Season</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">2023</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">mutate</span><span class="p">(</span><span class="w"> </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Regular Season"</span><span class="p">)</span><span class="w">

</span><span class="n">heat.post</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">playoff.threes</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">filter</span><span class="p">(</span><span class="w"> </span><span class="n">Player</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="n">poi</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">mutate</span><span class="p">(</span><span class="w"> </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Playoffs"</span><span class="w"> </span><span class="p">)</span><span class="w">

</span><span class="n">poi.dat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rbind</span><span class="p">(</span><span class="w"> </span><span class="n">heat.reg</span><span class="p">,</span><span class="w"> </span><span class="n">heat.post</span><span class="p">)</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">arrange</span><span class="p">(</span><span class="w"> </span><span class="n">Player</span><span class="w"> </span><span class="p">)</span><span class="w">

</span><span class="n">heat.reg.sum</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">three.dat</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">filter</span><span class="p">(</span><span class="w"> </span><span class="n">Player</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="n">poi</span><span class="p">,</span><span class="w"> </span><span class="n">Season</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">2023</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">summarise</span><span class="p">(</span><span class="w"> </span><span class="n">total.3P</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="w"> </span><span class="n">`3P`</span><span class="w"> </span><span class="p">),</span><span class="w">
                    </span><span class="n">total.3PA</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="w"> </span><span class="n">`3PA`</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">mutate</span><span class="p">(</span><span class="w"> </span><span class="n">total.perc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">total.3P</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">total.3PA</span><span class="p">,</span><span class="w">
                 </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Regular Season"</span><span class="p">)</span><span class="w">

</span><span class="n">heat.playoff.sum</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">playoff.threes</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">filter</span><span class="p">(</span><span class="w"> </span><span class="n">Player</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="n">poi</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">summarise</span><span class="p">(</span><span class="w"> </span><span class="n">total.3P</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="w"> </span><span class="n">`3P`</span><span class="w"> </span><span class="p">),</span><span class="w">
                    </span><span class="n">total.3PA</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="w"> </span><span class="n">`3PA`</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">mutate</span><span class="p">(</span><span class="w"> </span><span class="n">total.perc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">total.3P</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">total.3PA</span><span class="p">,</span><span class="w">
                 </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Playoffs"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">playoff.threes</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">filter</span><span class="p">(</span><span class="w"> </span><span class="n">Player</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="w"> </span><span class="s2">"Jayson Tatum"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Jaylen Brown"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Al Horford"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Derrick White"</span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">mutate</span><span class="p">(</span><span class="w"> </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Playoffs"</span><span class="w"> </span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt;          Player Season  Tm  MP 3P 3PA   3P%        mu       sigma   alpha0</span><span class="w">
</span><span class="c1">#&gt; 1  Jaylen Brown   2023 BOS 751 40 113 0.354 0.3404005 0.002320794 146.6741</span><span class="w">
</span><span class="c1">#&gt; 2    Al Horford   2023 BOS 617 28  94 0.298 0.3355152 0.002320794 144.5691</span><span class="w">
</span><span class="c1">#&gt; 3  Jayson Tatum   2023 BOS 799 53 164 0.323 0.3502851 0.002320794 150.9333</span><span class="w">
</span><span class="c1">#&gt; 4 Derrick White   2023 BOS 593 50 110 0.455 0.3396865 0.002320794 146.3665</span><span class="w">
</span><span class="c1">#&gt;      beta0   alphai    betai        eb     type</span><span class="w">
</span><span class="c1">#&gt; 1 284.2128 186.6741 357.2128 0.3432223 Playoffs</span><span class="w">
</span><span class="c1">#&gt; 2 286.3178 172.5691 352.3178 0.3287739 Playoffs</span><span class="w">
</span><span class="c1">#&gt; 3 279.9537 203.9333 390.9537 0.3428102 Playoffs</span><span class="w">
</span><span class="c1">#&gt; 4 284.5205 196.3665 344.5205 0.3630453 Playoffs</span><span class="w">

</span><span class="n">three.dat</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">filter</span><span class="p">(</span><span class="w"> </span><span class="n">Player</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="w"> </span><span class="s2">"Jayson Tatum"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Jaylen Brown"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Al Horford"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Derrick White"</span><span class="p">),</span><span class="w">
                 </span><span class="n">Season</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="m">2023</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">mutate</span><span class="p">(</span><span class="w"> </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Regular Season"</span><span class="w"> </span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt;          Player Season  Tm   MP  3P 3PA   3P%        mu       sigma   alpha0</span><span class="w">
</span><span class="c1">#&gt; 1  Jaylen Brown   2023 BOS 2405 163 487 0.335 0.3791683 0.002320794 163.3787</span><span class="w">
</span><span class="c1">#&gt; 2    Al Horford   2023 BOS 1922 145 325 0.446 0.3684356 0.002320794 158.7541</span><span class="w">
</span><span class="c1">#&gt; 3  Jayson Tatum   2023 BOS 2732 240 686 0.350 0.3882604 0.002320794 167.2963</span><span class="w">
</span><span class="c1">#&gt; 4 Derrick White   2023 BOS 2319 149 391 0.381 0.3733419 0.002320794 160.8681</span><span class="w">
</span><span class="c1">#&gt;      beta0   alphai    betai        eb           type</span><span class="w">
</span><span class="c1">#&gt; 1 267.5083 326.3787 591.5083 0.3555761 Regular Season</span><span class="w">
</span><span class="c1">#&gt; 2 272.1329 303.7541 452.1329 0.4018512 Regular Season</span><span class="w">
</span><span class="c1">#&gt; 3 263.5906 407.2963 709.5906 0.3646710 Regular Season</span><span class="w">
</span><span class="c1">#&gt; 4 270.0188 309.8681 512.0188 0.3770204 Regular Season</span><span class="w">
</span></code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mia.url</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"https://www.basketball-reference.com/playoffs/2023-nba-eastern-conference-finals-heat-vs-celtics.html"</span><span class="w">

</span><span class="n">mia.page</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read_html</span><span class="p">(</span><span class="w"> </span><span class="n">mia.url</span><span class="w"> </span><span class="p">)</span><span class="w">

</span><span class="n">mia.cols</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mia.page</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
  </span><span class="n">html_nodes</span><span class="p">(</span><span class="s2">"table#MIA &gt; thead &gt; tr &gt; th"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">html_text</span><span class="p">()</span><span class="w">

</span><span class="n">mia.cols</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mia.cols</span><span class="p">[</span><span class="w"> </span><span class="o">-</span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="p">)</span><span class="w"> </span><span class="p">]</span><span class="w">

</span><span class="n">mia.dat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="w"> 
  </span><span class="n">t</span><span class="p">(</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mia.page</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w"> 
               </span><span class="n">html_nodes</span><span class="p">(</span><span class="s2">"table#MIA &gt; tbody &gt; tr &gt; td"</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
               </span><span class="n">html_text</span><span class="p">(),</span><span class="w">
             </span><span class="n">nrow</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">29</span><span class="w"> </span><span class="p">)</span><span class="w">
     </span><span class="p">)</span><span class="w"> 
  </span><span class="p">)</span><span class="w">

</span><span class="n">colnames</span><span class="p">(</span><span class="w"> </span><span class="n">mia.dat</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mia.cols</span><span class="w">

</span><span class="n">mia.dat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mia.dat</span><span class="p">[</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">20</span><span class="w"> </span><span class="p">]</span><span class="w">

</span><span class="n">mia.dat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mia.dat</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">mutate</span><span class="p">(</span><span class="w"> </span><span class="n">across</span><span class="p">(</span><span class="w"> </span><span class="m">2</span><span class="o">:</span><span class="m">20</span><span class="p">,</span><span class="w"> </span><span class="n">as.numeric</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">tibble</span><span class="o">::</span><span class="n">add_column</span><span class="p">(</span><span class="w"> </span><span class="n">Season</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2023</span><span class="p">,</span><span class="w"> </span><span class="n">.after</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="w"> </span><span class="p">)</span><span class="w">
</span></code></pre></div></div>]]></content><author><name>Greg Bedwell</name><email>gregoryjbedwell@gmail.com</email></author><summary type="html"><![CDATA[Analyzing 3 point shooting percentage in the 2023 NBA playoffs.]]></summary></entry><entry><title type="html">calibrateR</title><link href="http://localhost:4000/calibrateR/" rel="alternate" type="text/html" title="calibrateR" /><published>2023-06-08T00:00:00-04:00</published><updated>2023-06-08T00:00:00-04:00</updated><id>http://localhost:4000/calibrateR</id><content type="html" xml:base="http://localhost:4000/calibrateR/"><![CDATA[<h3 id="introduction">Introduction</h3>

<p>When working at the bench, there are probably certain experiments and/or
calculations that you routinely do that you <i>hate</i> doing. There’s
no logical reason for why you feel this way. The experiment/calculation
isn’t hard <i>per se</i>, you just wish that you didn’t have to do it
<i>again</i>.</p>

<p>With this feeling of frustration in mind, I decided to streamline some
of these common calculations so that the heavy lifting is done behind
the scenes (insofar as there is anything truly “heavy” about these
calculations – perhaps “the clicking-and-dragging” is more apt). The
result, <code>calibrateR</code>, is an easy-to-use R package that
contains functions to help with Gibson assembly reaction setup, protein
concentration determination via colorimetric assays, size exclusion
column calibration, and more. I am happy to expand
<code>calibrateR</code>’s current functionalities. Please reach out with
other ideas/suggestions!</p>

<p><code>calibrateR</code> can be downloaded from
<a href="https://github.com/gbedwell/calibrateR">GitHub</a>.</p>

<h3 id="usage">Usage</h3>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">calibrateR</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h4 id="colorimetric-assays">Colorimetric Assays</h4>

<p>I’ll start by describing the way that the package approaches
colorimetric assays. For those who might be unfamiliar, colorimetric
assays are a very common way of determining the concentration of
analytes in solution. There are various types of colorimetric assays,
but the general procedure is similar across the board. First, the user
must calibrate the assay by measuring the output signal across a range
of known analyte concentrations. Then, from the empirically determined
relationship between analyte concentration and signal, the concentration
of analyte in the experimentally relevant samples can be determined.</p>

<p>In the example below, I start with defined standard analyte
concentrations (<code>conc</code>) and three replicates
(<code>rep1-3</code>) of corresponding signal readings. Note that the
signal readings are entered <i>in the same order</i> as the known
concentrations.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">conc</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="m">1.5</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">0.75</span><span class="p">,</span><span class="w"> </span><span class="m">0.5</span><span class="p">,</span><span class="w"> </span><span class="m">0.25</span><span class="p">,</span><span class="w"> </span><span class="m">0.125</span><span class="p">,</span><span class="w"> </span><span class="m">0.025</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">)</span><span class="w">
</span><span class="n">rep1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">2.312</span><span class="p">,</span><span class="w"> </span><span class="m">1.786</span><span class="p">,</span><span class="w"> </span><span class="m">1.273</span><span class="p">,</span><span class="w"> </span><span class="m">1.035</span><span class="p">,</span><span class="w"> </span><span class="m">0.744</span><span class="p">,</span><span class="w"> </span><span class="m">0.484</span><span class="p">,</span><span class="w"> </span><span class="m">0.351</span><span class="p">,</span><span class="w"> </span><span class="m">0.237</span><span class="p">,</span><span class="w"> </span><span class="m">0.209</span><span class="p">)</span><span class="w">
</span><span class="n">rep2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">2.249</span><span class="p">,</span><span class="w"> </span><span class="m">1.739</span><span class="p">,</span><span class="w"> </span><span class="m">1.207</span><span class="p">,</span><span class="w"> </span><span class="m">0.984</span><span class="p">,</span><span class="w"> </span><span class="m">0.701</span><span class="p">,</span><span class="w"> </span><span class="m">0.455</span><span class="p">,</span><span class="w"> </span><span class="m">0.338</span><span class="p">,</span><span class="w"> </span><span class="m">0.23</span><span class="p">,</span><span class="w"> </span><span class="m">0.209</span><span class="p">)</span><span class="w">
</span><span class="n">rep3</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">2.282</span><span class="p">,</span><span class="w"> </span><span class="m">1.715</span><span class="p">,</span><span class="w"> </span><span class="m">1.204</span><span class="p">,</span><span class="w"> </span><span class="m">0.99</span><span class="p">,</span><span class="w"> </span><span class="m">0.712</span><span class="p">,</span><span class="w"> </span><span class="m">0.484</span><span class="p">,</span><span class="w"> </span><span class="m">0.345</span><span class="p">,</span><span class="w"> </span><span class="m">0.24</span><span class="p">,</span><span class="w"> </span><span class="m">0.208</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Next, I will use the <code>calibrate_colorimetric()</code> function in
<code>calibrateR</code> to create a new function, here called
<code>bca()</code>, to do all of the downstream data analysis for me.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bca</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">calibrate_colorimetric</span><span class="p">(</span><span class="w"> </span><span class="n">conc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">conc</span><span class="p">,</span><span class="w">
                               </span><span class="n">abs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="w"> </span><span class="n">rep1</span><span class="p">,</span><span class="w"> </span><span class="n">rep2</span><span class="p">,</span><span class="w"> </span><span class="n">rep3</span><span class="w"> </span><span class="p">),</span><span class="w">
                               </span><span class="n">with.blank</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w">
                               </span><span class="n">nrep</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="w"> </span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>With the calibrated function defined, we can do one of two things. The
first thing we should do is look at our fit and make sure it’s
reasonable. To do this, we’ll use our concentration values to calculate
expected signal values based on the fit parameters. To do this, call
<code>bca( a = conc, return.conc = FALSE )</code>. In this instance, we
enter the known concentration values, and tell the function that it is
<i>not</i> returning concentration values (it’s returning signal
values). Because the units of both concentration and signal can vary
widely across assays, I intentionally left units off of the example
plot.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="w"> </span><span class="n">ggplot2</span><span class="w"> </span><span class="p">)</span><span class="w">

</span><span class="n">bca.df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="w"> </span><span class="n">conc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">conc</span><span class="p">,</span><span class="w">
                      </span><span class="n">meas</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="w"> </span><span class="n">rep1</span><span class="p">,</span><span class="w"> </span><span class="n">rep2</span><span class="p">,</span><span class="w"> </span><span class="n">rep3</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w">

</span><span class="n">bca.fit.df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="w"> </span><span class="n">conc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">conc</span><span class="p">,</span><span class="w"> 
                          </span><span class="n">fit</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bca</span><span class="p">(</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">conc</span><span class="p">,</span><span class="w"> </span><span class="n">return.conc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w">

</span><span class="n">ggplot</span><span class="p">(</span><span class="w"> </span><span class="n">bca.df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">conc</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">meas</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_point</span><span class="p">(</span><span class="n">shape</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">21</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"black"</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"gray75"</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2.5</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_line</span><span class="p">(</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bca.fit.df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">conc</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fit</span><span class="w"> </span><span class="p">),</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"red"</span><span class="p">,</span><span class="w"> </span><span class="n">linewidth</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.75</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme_bw</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"> 
  </span><span class="n">theme</span><span class="p">(</span><span class="w"> </span><span class="n">axis.text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">14</span><span class="w"> </span><span class="p">),</span><span class="w">
         </span><span class="n">axis.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">16</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">labs</span><span class="p">(</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Concentration"</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Signal"</span><span class="w"> </span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../figures/2023-06-08/unnamed-chunk-5-1.png" width="80%" style="display: block; margin: auto;" />
The fit seems reasonable. The observed data points lie nicely along the
fitted line. Now that we’ve calibrated the assay and are fairly
confident that the calibration makes sense, we can feed in signal values
from samples of unknown concentration. Here, we’ll assume that we have
five unknown samples and that each unknown sample was measured at a
2-fold dilution. We will use <code>return.conc = TRUE</code> and
<code>df = 2</code> in <code>bca()</code> to tell the function that it
<i>is</i> returning concentration values and to define the dilution
factor(s), respectively. The returned units of concentration are the
same as the units of concentration used to make the standard curve.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">set.seed</span><span class="p">(</span><span class="w"> </span><span class="m">1234</span><span class="w"> </span><span class="p">)</span><span class="w">
</span><span class="n">unk</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">runif</span><span class="p">(</span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.3</span><span class="p">,</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="w">

</span><span class="n">bca</span><span class="p">(</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unk</span><span class="p">,</span><span class="w"> </span><span class="n">return.conc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">df</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="w"> </span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt; [1] 0.5453686 2.2248925 2.1818814 2.2284591 3.0128681</span><span class="w">
</span></code></pre></div></div>

<h4 id="gibson-assembly">Gibson assembly</h4>

<p>To calculate Gibson assembly reaction volumes, you need to define eight
parameters for each reaction. These are: insert concentration(s), insert
length(s), vector concentration, vector length, the number of fragments
in the reaction, the molar ratio of insert to vector, the mass of vector
in the reaction (in ng), and the final volume of the reaction
<i>before</i> the addition of 2x master mix. Concentration units should
be ng/µL (or equivalent) and length units should be bp.</p>

<p>The function can calculate parameters for multiple reactions one fell
swoop. Vectors with lengths corresponding to the number of unique
reactions must be entered for all parameters except insert concentration
and insert length. For each reaction, the function will then extract the
relevant parameters from the input vectors and perform the requisite
calculations. A list of data frames is returned, where each list element
represents a unique reaction.</p>

<p>In the example below, I’m calculating reaction parameters for two
reactions. The first reaction has 2 input fragments and the second has
3.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gibson</span><span class="p">(</span><span class="w"> </span><span class="n">insert.conc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="w"> </span><span class="m">35</span><span class="p">,</span><span class="w"> </span><span class="m">78</span><span class="p">,</span><span class="w"> </span><span class="m">48</span><span class="p">,</span><span class="w"> </span><span class="m">37</span><span class="p">,</span><span class="w"> </span><span class="m">40</span><span class="w"> </span><span class="p">),</span><span class="w"> 
        </span><span class="n">insert.len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="w"> </span><span class="m">1894</span><span class="p">,</span><span class="w"> </span><span class="m">2403</span><span class="p">,</span><span class="w"> </span><span class="m">887</span><span class="p">,</span><span class="w"> </span><span class="m">1764</span><span class="p">,</span><span class="w"> </span><span class="m">943</span><span class="w"> </span><span class="p">),</span><span class="w">
        </span><span class="n">vec.conc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="w"> </span><span class="m">55</span><span class="p">,</span><span class="w"> </span><span class="m">65</span><span class="w"> </span><span class="p">),</span><span class="w"> 
        </span><span class="n">vec.len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="w"> </span><span class="m">4710</span><span class="p">,</span><span class="w"> </span><span class="m">5934</span><span class="w"> </span><span class="p">),</span><span class="w"> 
        </span><span class="n">n.frag</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="m">3</span><span class="w"> </span><span class="p">),</span><span class="w"> 
        </span><span class="n">vec.mass</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="w"> </span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="w"> </span><span class="p">),</span><span class="w">
        </span><span class="n">molar.ratio</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="w"> </span><span class="m">3</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="w"> </span><span class="p">),</span><span class="w"> 
        </span><span class="n">final.vol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="w"> </span><span class="p">),</span><span class="w"> 
        </span><span class="n">ids</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="w"> </span><span class="s2">"Reaction 1"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Reaction 2"</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt; $`Reaction 1`</span><span class="w">
</span><span class="c1">#&gt;            Volume</span><span class="w">
</span><span class="c1">#&gt; Fragment 1   1.72</span><span class="w">
</span><span class="c1">#&gt; Fragment 2   0.98</span><span class="w">
</span><span class="c1">#&gt; Vector       0.91</span><span class="w">
</span><span class="c1">#&gt; Water        1.39</span><span class="w">
</span><span class="c1">#&gt; Master Mix   5.00</span><span class="w">
</span><span class="c1">#&gt; </span><span class="w">
</span><span class="c1">#&gt; $`Reaction 2`</span><span class="w">
</span><span class="c1">#&gt;            Volume</span><span class="w">
</span><span class="c1">#&gt; Fragment 1   0.47</span><span class="w">
</span><span class="c1">#&gt; Fragment 2   1.21</span><span class="w">
</span><span class="c1">#&gt; Fragment 3   0.60</span><span class="w">
</span><span class="c1">#&gt; Vector       0.77</span><span class="w">
</span><span class="c1">#&gt; Water        1.95</span><span class="w">
</span><span class="c1">#&gt; Master Mix   5.00</span><span class="w">
</span></code></pre></div></div>

<h4 id="size-exclusion-column-calibration">Size exclusion column calibration</h4>

<p>Size exclusion chromatography (SEC) is a wildly available technique that
can provide useful information about macromolecules. Most commonly, SEC
is associated with molecular weight. However, SEC actually separates
macromolecules according to their hydrodynamic radius (or Stokes
radius). For macromolecules with similar overall shapes, changes in
hydrodynamic radius are due predominantly to changes in the number of
atoms present in the molecule (i.e., its mass). For macromolecules of
different shapes, however, separation based on hydrodynamic radius is a
poor indicator of molecular weight. For this reason, it is important to
be able to calibrate SEC columns for both radius and mass.</p>

<p>The <code>calibrate_sec()</code> function in <code>calibrateR</code>
works similarly to the <code>calibrate_colorimetric()</code> function
described above. The function minimally requires the user to define
three parameters: the measured elution volume of standard analytes, the
masses (yes, just the masses; in Da) of standard analytes, and the
macromolecular parameter of interest – either molecular weight
(<code>mw</code>) or hydrodynamic radius (<code>rh</code>).</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">masses</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="w"> </span><span class="m">670000</span><span class="p">,</span><span class="w"> </span><span class="m">158000</span><span class="p">,</span><span class="w"> </span><span class="m">44000</span><span class="p">,</span><span class="w"> </span><span class="m">17000</span><span class="p">,</span><span class="w"> </span><span class="m">1350</span><span class="w"> </span><span class="p">)</span><span class="w">
</span><span class="n">rep1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="w"> </span><span class="m">13.36</span><span class="p">,</span><span class="w"> </span><span class="m">16.07</span><span class="p">,</span><span class="w"> </span><span class="m">17.56</span><span class="p">,</span><span class="w"> </span><span class="m">18.46</span><span class="p">,</span><span class="w"> </span><span class="m">20.30</span><span class="w"> </span><span class="p">)</span><span class="w">
</span><span class="n">rep2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="w"> </span><span class="m">13.32</span><span class="p">,</span><span class="w"> </span><span class="m">16.03</span><span class="p">,</span><span class="w"> </span><span class="m">17.49</span><span class="p">,</span><span class="w"> </span><span class="m">18.38</span><span class="p">,</span><span class="w"> </span><span class="m">20.23</span><span class="w"> </span><span class="p">)</span><span class="w">
</span><span class="n">rep3</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="w"> </span><span class="m">13.38</span><span class="p">,</span><span class="w"> </span><span class="m">16.09</span><span class="p">,</span><span class="w"> </span><span class="m">17.58</span><span class="p">,</span><span class="w"> </span><span class="m">18.48</span><span class="p">,</span><span class="w"> </span><span class="m">20.33</span><span class="w"> </span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sec.rh</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">calibrate_sec</span><span class="p">(</span><span class="w"> </span><span class="n">vols</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="w"> </span><span class="n">rep1</span><span class="p">,</span><span class="w"> </span><span class="n">rep2</span><span class="p">,</span><span class="w"> </span><span class="n">rep3</span><span class="w"> </span><span class="p">),</span><span class="w">
                         </span><span class="n">masses</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">masses</span><span class="p">,</span><span class="w">
                         </span><span class="n">parameter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"rh"</span><span class="w"> </span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Running <code>calibrate_sec()</code> returns a function for downstream
number crunching. Setting <code>parameter = “rh”</code> uses a
<a href="https://febs.onlinelibrary.wiley.com/doi/full/10.1046/j.0014-2956.2001.02649.x?sid=nlm%3Apubmed">previously
published</a>
scaling law to convert the provided mass values to radius values.</p>

<p>Convention for SEC column calibration plots is to plot $\log{(M)}$ or
$\log{(R_H)}$ vs. volume. Here, I will create a sequence of dummy
elution volumes between the observed elution volumes for the standard
analytes. Because I calibrated the column based on hydrodynamic radius
instead of mass, I will use the function <code>mass_to_radius()</code>
to convert the standard analyte masses to hydrodynamic radii. Then, I
will use the calibration to calculate the expected radii of analytes
eluting at each of the dummy elution volumes. Non-normalized elution
volumes are typically entered in mL units. Because these units don’t
strictly matter, however, I’ve left those units off of the plot. The
y-axis values are log-transformed. By default, however, the function
automatically re-transforms the expected values to the linear scale.
Note that the input mass units must be g/mol (Daltons). Calculated mass
values are returned in the same units. Hydrodynamic radius values are
returned in nm.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sec.df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="w"> </span><span class="n">vols</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="w"> </span><span class="n">rep1</span><span class="p">,</span><span class="w"> </span><span class="n">rep2</span><span class="p">,</span><span class="w"> </span><span class="n">rep3</span><span class="w"> </span><span class="p">),</span><span class="w">
                      </span><span class="n">rads</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mass_to_radius</span><span class="p">(</span><span class="w"> </span><span class="n">masses</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">masses</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w">

</span><span class="n">sec.fit</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="w"> </span><span class="n">vols</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">seq</span><span class="p">(</span><span class="w"> </span><span class="m">13</span><span class="p">,</span><span class="w"> </span><span class="m">21</span><span class="p">,</span><span class="w"> </span><span class="m">0.01</span><span class="w"> </span><span class="p">),</span><span class="w">
                       </span><span class="n">fit</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sec.rh</span><span class="p">(</span><span class="w"> </span><span class="n">seq</span><span class="p">(</span><span class="w"> </span><span class="m">13</span><span class="p">,</span><span class="w"> </span><span class="m">21</span><span class="p">,</span><span class="w"> </span><span class="m">0.01</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w">

</span><span class="n">ggplot</span><span class="p">(</span><span class="w"> </span><span class="n">sec.df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">vols</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">log</span><span class="p">(</span><span class="w"> </span><span class="n">rads</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_point</span><span class="p">(</span><span class="n">shape</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">21</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"black"</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"gray75"</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2.5</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_line</span><span class="p">(</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sec.fit</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">vols</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">log</span><span class="p">(</span><span class="w"> </span><span class="n">fit</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">),</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"red"</span><span class="p">,</span><span class="w"> </span><span class="n">linewidth</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.75</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme_bw</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"> 
  </span><span class="n">theme</span><span class="p">(</span><span class="w"> </span><span class="n">axis.text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">14</span><span class="w"> </span><span class="p">),</span><span class="w">
         </span><span class="n">axis.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">16</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">labs</span><span class="p">(</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Elution Volume"</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"log(Rh)"</span><span class="w"> </span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../figures/2023-06-08/unnamed-chunk-10-1.png" width="80%" style="display: block; margin: auto;" /></p>

<p>To apply the calibrated function to analytes of unknown mass/radius,
simply enter the empirical elution volume of the analyte into the
function. If the column calibration was done using normalized elution
volumes, the function <code>normalize_ev()</code> will normalize the
analyte elution volumes based on the column’s void and column volumes.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sec.rh</span><span class="p">(</span><span class="w"> </span><span class="m">16.495</span><span class="w"> </span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt;      a </span><span class="w">
</span><span class="c1">#&gt; 3.9831</span><span class="w">
</span></code></pre></div></div>

<h4 id="uvvis">UV/vis</h4>

<p>Concentration determination by UV/Vis spectroscopy is very common in the
lab. The <code>calibrateR</code> function <code>uv_vis()</code> takes as
input the measured absorbance at the desired wavelength, the extinction
coefficient of the molecule of interest, the dilution factor of the
measurement, the path length of light, and the type of molecule being
measured. If the type of molecule being measured is “protein”, the
extinction coefficient must be defined. If the type of molecule is one
of “dsDNA”, “ssDNA”, or “ssRNA”, the extinction coefficient can be
<code>NULL</code>, and the standard (average) extinction coefficients
for these macromolecules are used. The path length defaults to 1 cm.</p>

<p>In the example below, a two-fold dilution of a purified protein with an
extinction coefficient of 35000 M<sup>-1</sup>cm<sup>-1</sup> was
measured to have an absorbance of 0.491 at 280 nm. <code>uv_vis()</code>
returns concentrations in same concentration units used in the
extinction coefficient. In the example, that is molar units.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">uv_vis</span><span class="p">(</span><span class="w"> </span><span class="n">abs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.491</span><span class="p">,</span><span class="w"> 
        </span><span class="n">ext</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">35000</span><span class="p">,</span><span class="w">
        </span><span class="n">df</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w">
        </span><span class="n">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"protein"</span><span class="w"> </span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt; [1] 2.805714e-05</span><span class="w">
</span></code></pre></div></div>]]></content><author><name>Greg Bedwell</name><email>gregoryjbedwell@gmail.com</email></author><summary type="html"><![CDATA[An R package to streamline standard laboratory calculations.]]></summary></entry><entry><title type="html">nbconv</title><link href="http://localhost:4000/nb-convolutions/" rel="alternate" type="text/html" title="nbconv" /><published>2023-02-01T00:00:00-05:00</published><updated>2023-02-01T00:00:00-05:00</updated><id>http://localhost:4000/nb-convolutions</id><content type="html" xml:base="http://localhost:4000/nb-convolutions/"><![CDATA[<h3 id="introduction">Introduction</h3>

<p>The negative binomial (NB) distribution is widely used to model count
data whose variance is greater than expected given other discrete
probability distributions. The ability to account for overdispersion in
observed data using the NB distribution has led to its application
across a wide range scientific disciplines as an alternative to Poisson
models. Recently, I was interested in evaluating the sum of independent
but not identically distributed negative binomial random variables
(r.v.s). I discovered relatively quickly, however, that a
straightforward solution to this problem doesn’t really exist. The exact
solutions that have been published by
<a href="https://www.researchgate.net/publication/23635822_On_the_convolution_of_the_negative_binomial_random_variables">Furman</a>
and <a href="https://www.jstor.org/stable/25662420">Vellaisamy</a> both have
significant computational drawbacks. Approximate methods have also been
<a href="https://www.martinmodrak.cz/2019/06/20/approximate-densities-for-sums-of-variables-negative-binomials-and-saddlepoint/">described</a>
for such sums, which largely alleviate the computational burdens of the
exact methods, but at the potential cost of numeric accuracy. What
really befuddled me, however, was the fact that I was unable to find any
widely accessible package/tool/etc. that would let me easily apply
any/all of these methods to actual data. As such, I wrote the R package
that I felt was missing: <code>nbconv</code>.</p>

<p>The current version of <code>nbconv</code> can be found on
<a href="https://cran.r-project.org/package=nbconv">CRAN</a> and the developmental
version can be found on <a href="https://github.com/gbedwell/nbconv">GitHub</a>.</p>

<h3 id="package-description">Package description</h3>

<p><code>nbconv</code> was written with the same general syntax as other
distribution functions in R. The package has 5 principal functions:
<code>dnbconv()</code>, <code>pnbconv()</code>, <code>qnbconv()</code>,
<code>rnbconv()</code>, and <code>nbconv_params()</code>. The first four
of these return the mass function (PMF), distribution function (CDF),
quantile function, and random deviates, respectively, for the
convolution of NB r.v.s. The function <code>nbconv_params()</code>
returns summary statistics of a given NB convolution based on its
moments. The signatures for the 5 principal functions are:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dnbconv</span><span class="p">(</span><span class="n">counts</span><span class="p">,</span><span class="w"> </span><span class="n">mus</span><span class="p">,</span><span class="w"> </span><span class="n">ps</span><span class="p">,</span><span class="w"> </span><span class="n">phis</span><span class="p">,</span><span class="w"> </span><span class="n">method</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"exact"</span><span class="p">,</span><span class="w"> </span><span class="s2">"moments"</span><span class="p">,</span><span class="w"> </span><span class="s2">"saddlepoint"</span><span class="p">),</span><span class="w"> 
</span><span class="n">n.terms</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1000</span><span class="p">,</span><span class="w"> </span><span class="n">n.cores</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">tolerance</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1e-3</span><span class="p">,</span><span class="w"> </span><span class="n">normalize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">

</span><span class="n">pnbconv</span><span class="p">(</span><span class="n">quants</span><span class="p">,</span><span class="w"> </span><span class="n">mus</span><span class="p">,</span><span class="w"> </span><span class="n">ps</span><span class="p">,</span><span class="w"> </span><span class="n">phis</span><span class="p">,</span><span class="w"> </span><span class="n">method</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"exact"</span><span class="p">,</span><span class="w"> </span><span class="s2">"moments"</span><span class="p">,</span><span class="w"> </span><span class="s2">"saddlepoint"</span><span class="p">),</span><span class="w">
</span><span class="n">n.terms</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1000</span><span class="p">,</span><span class="w"> </span><span class="n">n.cores</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">tolerance</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1e-3</span><span class="p">,</span><span class="w"> </span><span class="n">normalize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">

</span><span class="n">qnbconv</span><span class="p">(</span><span class="n">probs</span><span class="p">,</span><span class="w"> </span><span class="n">counts</span><span class="p">,</span><span class="w"> </span><span class="n">mus</span><span class="p">,</span><span class="w"> </span><span class="n">ps</span><span class="p">,</span><span class="w"> </span><span class="n">phis</span><span class="p">,</span><span class="w"> </span><span class="n">method</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"exact"</span><span class="p">,</span><span class="w"> </span><span class="s2">"moments"</span><span class="p">,</span><span class="w"> </span><span class="s2">"saddlepoint"</span><span class="p">),</span><span class="w">
</span><span class="n">n.terms</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1000</span><span class="p">,</span><span class="w"> </span><span class="n">n.cores</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">tolerance</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1e-3</span><span class="p">,</span><span class="w"> </span><span class="n">normalize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">

</span><span class="n">rnbconv</span><span class="p">(</span><span class="n">mus</span><span class="p">,</span><span class="w"> </span><span class="n">phis</span><span class="p">,</span><span class="w"> </span><span class="n">ps</span><span class="p">,</span><span class="w"> </span><span class="n">n.samp</span><span class="p">,</span><span class="w"> </span><span class="n">n.cores</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w">

</span><span class="n">nbconv_params</span><span class="p">(</span><span class="n">mus</span><span class="p">,</span><span class="w"> </span><span class="n">phis</span><span class="p">,</span><span class="w"> </span><span class="n">ps</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>The parameterization of the NB distribution used in <code>nbconv</code>
is the same as the parameterization used by
<code>stats::d/p/q/rnbinom()</code>. All of the <code>nbconv</code>
functions take as input vectors of either constituent distribution means
(<code>mus</code>) or probabilities of success (<code>ps</code>) and
consitutent distribution dispersion parameters (<code>phis</code>,
referred to as <code>size</code> in <code>stats</code>).</p>

<p>The PMF, CDF, and quantile functions all require specification of the
evaluation method. In <code>nbconv</code>, these are: Furman’s exact
equation (<code>method = “exact”</code>), a method of moments
approximation (<code>method = “moments”</code>), and the saddlepoint
approximation (<code>method = “saddlepoint”</code>). I’ll avoid the gory
mathematical details of the evaluation methods in this post, but a
detailed description can be found
<a href="https://gbedwell.github.io/files/nbconv_background.pdf">here</a>. To give
credit where it is due, Martin Modrák’s <a href="https://www.martinmodrak.cz/2019/06/20/approximate-densities-for-sums-of-variables-negative-binomials-and-saddlepoint/">blog
post</a>
was my inspiration to include the saddlepoint approximation in
<code>nbconv</code>.</p>

<p>Other method-specific variables can also be user-defined in these
functions. The variables <code>n.terms</code> and <code>tolerance</code>
only pertain to evaluation via Furman’s exact function and define 1) the
number of terms included in the series and 2) how close the sum of the
PMF of the mixture r.v. $K$ (see the <a href="https://gbedwell.github.io/files/nbconv_background.pdf">method
descriptions</a>)
must be to 1 to be accepted, respectively. The threshold defined via
<code>tolerance</code> serves as a way to ensure that the number of
terms included in the series sufficiently describe the possible values
of $K$. The variable <code>normalize</code> pertains to evaluation via
the saddlepoint approximation and defines whether or not the saddlepoint
density should be normalized to sum to 1, since the saddlepoint PMF is
not guaranteed to do so. Evaluation of the mass, distribution, and
quantile functions via the exact or the saddlepoint methods, as well as
generation of random deviates via <code>rnbconv()</code>, can be
parallelized by setting <code>n.cores</code> to a value greater than 1.
It should be noted, however, that for the exact function, only
evaluation of the PMF, and evaluation of the recursive parameters, are
parallelized. Because of this, CPU time for evaluation of the exact
function is linearly related to the number of terms included in the
series. <code>rnbconv()</code> and <code>nbconv_params()</code> work
independently of the evaluation methods described above. The variable
<code>n.samp</code> in <code>rnbconv()</code> defines the number of
random deviates to be sampled from the target convolution.</p>

<h3 id="examples">Examples</h3>

<p>To demonstrate general use of <code>nbconv</code> functions, I’ll
generate some sample data. I’ll use the gamma distribution to ensure
that $\mu ≥ 0$ and $\phi &gt; 0$.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">nbconv</span><span class="p">)</span><span class="w">

</span><span class="n">set.seed</span><span class="p">(</span><span class="m">1234</span><span class="p">)</span><span class="w">
</span><span class="n">mus</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rgamma</span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">25</span><span class="p">,</span><span class="w"> </span><span class="n">shape</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3.5</span><span class="p">,</span><span class="w"> </span><span class="n">scale</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3.5</span><span class="p">)</span><span class="w">

</span><span class="n">set.seed</span><span class="p">(</span><span class="m">1234</span><span class="p">)</span><span class="w">
</span><span class="n">phis</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rgamma</span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">25</span><span class="p">,</span><span class="w"> </span><span class="n">shape</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">scale</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">4</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Summary statistics of the convolution can be informative as to what
methods might or might not work well with our data. I won’t go into too
much detail here, but in general, the exact method provides the most
accurate results but at what can be a steep computational cost. For
convolutions of wildly different NB distributions and/or highly
overdispersed distributions, the influence of the mixture distribution
on the shape of the convolution grows. When this happens, the number of
terms included in the series generally has to increase as well. Because
the exact method depends on recursive parameters, this means linearly
increasing computation time. However, in instances where the convolution
is largely symmetric and/or doesn’t exhibit a large degree of kurtosis,
the method of moments and saddlepoint approximations work pretty well.
Anecdotally, the saddlepoint approximation is a little bit more robust
to skewness and kurotosis than the method of moments approximation, but
I won’t explore this point in any more detail here.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nbconv_params</span><span class="p">(</span><span class="w"> </span><span class="n">mus</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mus</span><span class="p">,</span><span class="w"> </span><span class="n">phis</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">phis</span><span class="w"> </span><span class="p">)</span><span class="w">
</span><span class="c1">#&gt;         mean       sigma2     skewness  ex.kurtosis       K.mean </span><span class="w">
</span><span class="c1">#&gt; 259.98524927 722.99508196   0.17586635   0.04909827  26.26988006</span><span class="w">
</span></code></pre></div></div>

<p>The output of <code>nbconv_params()</code> tells us that the convolution
of the sample NB r.v.s is approximately symmetric and doesn’t exhibit
much tailing. Because of this, we could probably get away with using any
of the three evaluation methods. For the purposes of demonstration,
however, I’ll go ahead and use them all. I’ll additionally calculate
empirical probability masses from random deviates sampled using
<code>rnbconv()</code> to serve as reference data.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">samps</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rnbconv</span><span class="p">(</span><span class="w"> </span><span class="n">mus</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mus</span><span class="p">,</span><span class="w"> </span><span class="n">phis</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">phis</span><span class="p">,</span><span class="w"> </span><span class="n">n.samp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1e6</span><span class="p">,</span><span class="w"> </span><span class="n">n.cores</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="w"> </span><span class="p">)</span><span class="w">

</span><span class="n">empirical</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">stats</span><span class="o">::</span><span class="n">density</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">samps</span><span class="p">,</span><span class="w"> </span><span class="n">from</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="n">to</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">500</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">500</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="o">$</span><span class="n">y</span><span class="w">

</span><span class="n">exact</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dnbconv</span><span class="p">(</span><span class="w"> </span><span class="n">mus</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mus</span><span class="p">,</span><span class="w"> </span><span class="n">phis</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">phis</span><span class="p">,</span><span class="w"> </span><span class="n">counts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="o">:</span><span class="m">500</span><span class="p">,</span><span class="w"> 
                  </span><span class="n">method</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"exact"</span><span class="p">,</span><span class="w"> </span><span class="n">n.terms</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1000</span><span class="p">,</span><span class="w"> </span><span class="n">n.cores</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="w"> </span><span class="p">)</span><span class="w">

</span><span class="n">moments</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dnbconv</span><span class="p">(</span><span class="w"> </span><span class="n">mus</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mus</span><span class="p">,</span><span class="w"> </span><span class="n">phis</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">phis</span><span class="p">,</span><span class="w"> </span><span class="n">counts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="o">:</span><span class="m">500</span><span class="p">,</span><span class="w"> </span><span class="n">method</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"moments"</span><span class="w"> </span><span class="p">)</span><span class="w">

</span><span class="n">saddlepoint</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dnbconv</span><span class="p">(</span><span class="w"> </span><span class="n">mus</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mus</span><span class="p">,</span><span class="w"> </span><span class="n">phis</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">phis</span><span class="p">,</span><span class="w"> </span><span class="n">counts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="o">:</span><span class="m">500</span><span class="p">,</span><span class="w"> 
                        </span><span class="n">method</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"saddlepoint"</span><span class="p">,</span><span class="w"> </span><span class="n">n.cores</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">normalize</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="w"> </span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>For easier visualization, I’ll combine the four calculated probability
mass vectors into a single long data frame.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="w"> </span><span class="n">empirical</span><span class="p">,</span><span class="w"> </span><span class="n">exact</span><span class="p">,</span><span class="w"> </span><span class="n">moments</span><span class="p">,</span><span class="w"> </span><span class="n">saddlepoint</span><span class="w"> </span><span class="p">)</span><span class="w">

</span><span class="n">df</span><span class="o">$</span><span class="n">count</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="w"> </span><span class="m">0</span><span class="o">:</span><span class="m">500</span><span class="w"> </span><span class="p">)</span><span class="w">

</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">df</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">tidyr</span><span class="o">::</span><span class="n">pivot_longer</span><span class="p">(</span><span class="w"> </span><span class="n">cols</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">!</span><span class="n">count</span><span class="p">,</span><span class="w"> </span><span class="n">names_to</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"method"</span><span class="p">,</span><span class="w"> </span><span class="n">values_to</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"probability"</span><span class="p">)</span><span class="w"> </span><span class="o">|&gt;</span><span class="w">
  </span><span class="n">dplyr</span><span class="o">::</span><span class="n">arrange</span><span class="p">(</span><span class="w"> </span><span class="n">method</span><span class="p">,</span><span class="w"> </span><span class="n">count</span><span class="w"> </span><span class="p">)</span><span class="w">

</span><span class="n">df</span><span class="o">$</span><span class="n">method</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">factor</span><span class="p">(</span><span class="w"> </span><span class="n">df</span><span class="o">$</span><span class="n">method</span><span class="p">,</span><span class="w"> </span><span class="n">levels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"empirical"</span><span class="p">,</span><span class="w"> </span><span class="s2">"exact"</span><span class="p">,</span><span class="w"> </span><span class="s2">"moments"</span><span class="p">,</span><span class="w"> </span><span class="s2">"saddlepoint"</span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="w"> </span><span class="n">ggplot2</span><span class="w"> </span><span class="p">)</span><span class="w">

</span><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df</span><span class="p">,</span><span class="w">
             </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">count</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">probability</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">method</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_area</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="o">$</span><span class="n">method</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"empirical"</span><span class="p">,],</span><span class="w">
              </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">count</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">probability</span><span class="w"> </span><span class="p">),</span><span class="w">
              </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"gray50"</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="o">=</span><span class="s2">"gray50"</span><span class="p">,</span><span class="w">
              </span><span class="n">inherit.aes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="n">alpha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.5</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">  
  </span><span class="n">geom_point</span><span class="p">(</span><span class="n">shape</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">21</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"#00000000"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">scale_fill_manual</span><span class="p">(</span><span class="n">values</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"gray50"</span><span class="p">,</span><span class="s2">"darkblue"</span><span class="p">,</span><span class="s2">"darkred"</span><span class="p">,</span><span class="s2">"darkgreen"</span><span class="p">),</span><span class="w">
                     </span><span class="n">labels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Empirical"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Exact"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Moments"</span><span class="p">,</span><span class="w"> </span><span class="s2">"Saddlepoint"</span><span class="w"> </span><span class="p">),</span><span class="w">
                     </span><span class="n">guide</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">guide_legend</span><span class="p">(</span><span class="n">title.position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"top"</span><span class="p">,</span><span class="w">
                                          </span><span class="n">title.hjust</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.5</span><span class="p">,</span><span class="w">
                                          </span><span class="n">override.aes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2.5</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme_bw</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="n">axis.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">16</span><span class="p">),</span><span class="w">
        </span><span class="n">axis.text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_text</span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">14</span><span class="p">),</span><span class="w">
        </span><span class="n">legend.position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"top"</span><span class="p">,</span><span class="w">
        </span><span class="n">legend.title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
        </span><span class="n">legend.key.size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unit</span><span class="p">(</span><span class="m">3</span><span class="p">,</span><span class="w"> </span><span class="s2">"point"</span><span class="p">),</span><span class="w">
        </span><span class="n">panel.spacing</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">unit</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="s2">"lines"</span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">labs</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Counts"</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Probability"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="../figures/2023-02-01/unnamed-chunk-7-1.png" width="80%" style="display: block; margin: auto;" /></p>

<p>Visualizing the data, we can see that all three methods do indeed appear
describe the empirical distribution well. This will not always be the
case! I strongly encourage users of <code>nbconv</code> to pay attention
to the summary statistics of the target convolution and to compare the
evaluated distribution to random deviates!</p>

<p>Hopefully this brief example effectively demonstrates the general
workflow of <code>nbconv</code>. If you have any comments or questions,
please reach out!</p>]]></content><author><name>Greg Bedwell</name><email>gregoryjbedwell@gmail.com</email></author><summary type="html"><![CDATA[An R package to evaluation negative binomial convolutions.]]></summary></entry><entry><title type="html">Generating random genome fragments in R</title><link href="http://localhost:4000/random-genome-fragments/" rel="alternate" type="text/html" title="Generating random genome fragments in R" /><published>2022-12-27T00:00:00-05:00</published><updated>2022-12-27T00:00:00-05:00</updated><id>http://localhost:4000/random-genome-fragments</id><content type="html" xml:base="http://localhost:4000/random-genome-fragments/"><![CDATA[<p>In the analysis of genomic integration site data, a theoretical random
integration site distribution is often used as a lower boundary for
feature enrichment. That is, whether or not a given feature (e.g. a
particular gene) harbors more integration sites than would be expected
given a true random distribution. In principle, the derivation of an
expected random distribution is not too difficult. Given the genome
size, $L_G$, the binomial probability of integration into a particular
region $i$ is simply $p_i = L_i/L_G$, where $L_i$ is the length of $i$.
Therefore, the expected number of integration sites in $i$ can be
expressed as $I \sim Bin(n, p_i)$.</p>

<p>In reality, however, the entire genome is rarely accessible by common
next-generation sequencing technologies. While long-read sequencing is
growing in both accessibility and throughput, it is still common for
integration site mapping to be done using e.g. 150 bp paired-end
sequencing. Because of this, certain regions of the genome, such has
highly repetitive regions, are effectively “invisible” due to the
inability to confidently align short reads to them. In addition,
different genome fragmentation strategies may influence the mappable
regions of a genome in a given experiment. For example, when using a
restriction enzyme (or a cocktail of restriction enzymes) to fragment
the genome, certain regions deficient in the target recognition
sequence(s) will have comparatively fewer mapped reads than other
regions.</p>

<p>To accurately calculate $p_i$ for a given set of sequencing conditions,
one really needs to know the <i>effective</i> genome length,
$L_{G_{eff}}$. Because mappable regions of the genome can depend on
things like fragmentation strategy, it is convenient to be able to
easily estimate the mappable genome using simulated genomic fragments
that match both the genome fragmentation method used and the sequencing
approach.</p>

<p>This idea is not new. People doing integration site analyses have been
using simulated random datasets for many years in one way or another.
However, many of the scripts in use (at least that I have seen), are
rather slow, somewhat inflexible, and are provided as stand alone
software. After spending a substantial amount of time adapting and
eventually wholly rewriting some existing Python scripts for random
fragment generation, I decided to develop an R approach that would slot
seamlessly into the Bioconductor framework. I’ve wrapped those functions
up in the xInt package that is still under development (as of 12/2022).
This aspect of the package, however, is functional. I’ll briefly explain
the workflow below.</p>

<h3 id="load-packages">Load packages</h3>

<p>To get started, install xInt if it isn’t already.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">devtools</span><span class="o">::</span><span class="n">install_github</span><span class="p">(</span><span class="n">repo</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"gbedwell/xInt"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Next, load xInt and the <a href="https://bioconductor.org/packages/release/bioc/html/BSgenome.html">BSgenome
object</a>
that corresponds to the genome of interest. In this example, I’ll be
using the new <a href="https://bioconductor.org/packages/release/data/annotation/html/BSgenome.Hsapiens.NCBI.T2T.CHM13v2.0.html">CHM13v2
T2T</a>
human genome build.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">xInt</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">BSgenome.Hsapiens.NCBI.T2T.CHM13v2.0</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h3 id="restriction-enzyme-cut-positions">Restriction enzyme cut positions</h3>

<p>If fragmenting the genome by restriction digestion, the first step in
generating random genome fragments is to extract the sequences of each
chromosome.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">chr.seqs</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">xInt</span><span class="o">::</span><span class="n">get_chromosome_seqs</span><span class="p">(</span><span class="n">genome.obj</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">BSgenome.Hsapiens.NCBI.T2T.CHM13v2.0</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>The output of <code>get_chromosome_seqs()</code> is a list of DNAString
objects corresponding to each of the chromosomes in the target genome.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#&gt; $`1`
#&gt; 248387328-letter DNAString object
#&gt; seq: CACCCTAAACCCTAACCCCTAACCCTAACCCTAACC...AGGGTTAGGGTTAGGGTTAGGGTTAGGGTTAGGGTT
#&gt; 
#&gt; $`2`
#&gt; 242696752-letter DNAString object
#&gt; seq: TAACCCTAACCCTAACCCTAACCCTAACCCTAACCC...TAGGGTTAGGGTTTAGGGGTTTAGGGTTAGGGTTAG
</code></pre></div></div>

<p>Next, you can use the <code>digest()</code> function to identify all of
the possible fragmentation positions on both forward and reverse strands
of each chromosome. You must supply the recognition sequences of the
enzymes being used as a character vector.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">re.cuts</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">xInt</span><span class="o">::</span><span class="n">digest</span><span class="p">(</span><span class="n">string.list</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">chr.seqs</span><span class="p">,</span><span class="w"> 
                        </span><span class="n">re.sites</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="s2">"TTAA"</span><span class="p">,</span><span class="s2">"AGATCT"</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<h3 id="random-integration-site-positions">Random integration site positions</h3>

<p>Now you want to generate random integration sites throughout the genome.
This step is the same regardless of the fragmentation method used.
First, define the number of sites that you want to generate. For good
estimation of the mappable genome, this number should be rather high
(e.g. $10^7-10^8$ sites). If you just want a representative random
dataset, however, this number can be much smaller (e.g. $10^4-10^5$
sites). For example purposes, I’ll generate $10^5$ sites.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rand.sites</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">xInt</span><span class="o">::</span><span class="n">random_sites</span><span class="p">(</span><span class="n">n.sites</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1E5</span><span class="p">,</span><span class="w"> 
                                 </span><span class="n">genome.obj</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">BSgenome.Hsapiens.NCBI.T2T.CHM13v2.0</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h3 id="generating-genomic-fragments">Generating genomic fragments</h3>

<p>You now want to make genomic fragments that mimic the genomic fragments
obtained in your experiment. For restriction digestion, you want to use
the random sites and the restriction enzyme cut positions generated with
the <code>digest()</code> function to generate the fragments. Be sure to
set <code>random = FALSE</code> in <code>make_fragments()</code>.
Fragment coordinates are defined from the simulated random integration
site to the nearest restriction enzyme cut position <i>downstream</i> of
the integration site. This is analogous to sequencing off of the viral
3’ LTR. I have not yet incorporated a way to simulate fragments
generated from the viral 5’ LTR.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">re.fragments</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">xInt</span><span class="o">::</span><span class="n">make_fragments</span><span class="p">(</span><span class="n">int.sites</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rand.sites</span><span class="p">,</span><span class="w"> 
                                     </span><span class="n">frag.sites</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">re.cuts</span><span class="p">,</span><span class="w">
                                     </span><span class="n">random</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w">
                                     </span><span class="n">genome.obj</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">BSgenome.Hsapiens.NCBI.T2T.CHM13v2.0</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>For random fragmentation, you want to set <code>frag.sites = NULL</code>
and <code>random = TRUE</code> in <code>make_fragments()</code>. You
also want to set the mean ± sd fragment lengths (default values of 500
bp and 250 bp, respectively). Fragments lengths are randomly sampled
from a log-normal distribution with the defined parameters and fragment
end positions are calculated relative to each simulated random
integration site.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rand.fragments</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">xInt</span><span class="o">::</span><span class="n">make_fragments</span><span class="p">(</span><span class="n">int.sites</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rand.sites</span><span class="p">,</span><span class="w"> 
                                       </span><span class="n">frag.sites</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NULL</span><span class="p">,</span><span class="w"> 
                                       </span><span class="n">random</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> 
                                       </span><span class="n">mean</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">500</span><span class="p">,</span><span class="w"> 
                                       </span><span class="n">sd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">250</span><span class="p">,</span><span class="w">
                                       </span><span class="n">genome.obj</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">BSgenome.Hsapiens.NCBI.T2T.CHM13v2.0</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h3 id="extracting-and-trimming-fragment-sequences">Extracting and trimming fragment sequences</h3>

<p>I rely on <code>BSgenome::getSeq()</code> to extract the sequences
corresponding to the fragment positions. These sequences are intended to
mimic the genomic fragments sequenced in the sequencing reaction.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">frag.seqs</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">BSgenome</span><span class="o">::</span><span class="n">getSeq</span><span class="p">(</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">BSgenome.Hsapiens.NCBI.T2T.CHM13v2.0</span><span class="p">,</span><span class="w">
                              </span><span class="n">names</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rand.fragments</span><span class="p">,</span><span class="w">
                              </span><span class="n">as.character</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#&gt; DNAStringSet object of length 100000:
#&gt;          width seq
#&gt;      [1]   808 TTAATGGAAAGAGGAGGAGGAGGACGGGGGT...CAATGCAAAAAGCATACTGCCTTCTCTTCTG
#&gt;      [2]   693 AAAATGAAAGAACAGTTAAATAAATCATGGC...GCAGACTGGCTCCTTCAGTGGGTAGGCCAGC
#&gt;      [3]   360 GCTAGGTCAAGGTGAACACCAGTGTTGAGTT...TAGGCGACTTTACACAATAAAATAGGCAATG
#&gt;      [4]   797 TTTATAGTCTTTAAAAAGCAGGAACTACAAA...TGGGTGTGTAGGAGTGTGAATACGAACACGT
#&gt;      [5]   124 CCAACAGTAAAAACACCAAATAATCCAGTTA...TTCCATCAGCCACCAGGGAGATGCAAATTAC
#&gt;      ...   ... ...
#&gt;  [99996]   524 TAGAGGATTTTTGTGAGATTATGTATATAAA...AAGAGATTGGCTATATTTAGTACTGGGTAGG
#&gt;  [99997]   359 GTGTGAAGGAGCTGTTGGTAAAATGTGTTAT...ATGTCACCATTTTGGGAGCAAGACAGCTAAT
#&gt;  [99998]   197 TATGGTGAAAAGAAAAGGCTTAACACTACTG...AAGACACCTGTACTTGTATGTTTATCACAGC
#&gt;  [99999]   718 TAAAACTAACTCTGAGATTAAAGAAAAAAGC...GTCAGCATAGGGTTAAGTTTAGGGGTTAGGG
#&gt; [100000]   487 TGTCAAGTTGAGGGGAGGAGGGAATGGAGAG...AGTGTAAGCATGCTGGATCCATACAAATGTA
</code></pre></div></div>

<p>To mimic the sequencing output, however, the genomic fragments must be
trimmed. The function <code>trim_seqs()</code> will trim the ends of
each fragment to the maximum desired length and return the paired reads
as matched entries in one of two list elements. The first list element
corresponds to forward reads and the second list element corresponds to
reverse reads. The reverse reads are returned in 5’ to 3’ orientation.</p>

<p>In addition to defining the maximum read length,
<code>trim_seqs()</code> has options to define the minimum fragment
width (default 14 bp) and the maximum inner distance between pairs
(default 1000 bp). These filtering parameters will decrease the number
of output read pairs, so don’t be alarmed if the lengths of the
<code>trim_seqs()</code> list elements is less than the number of
generated sites.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">frag.trim</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">xInt</span><span class="o">::</span><span class="n">trim_seqs</span><span class="p">(</span><span class="n">fragments</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">frag.seqs</span><span class="p">,</span><span class="w"> 
                             </span><span class="n">min.width</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">14</span><span class="p">,</span><span class="w"> 
                             </span><span class="n">max.distance</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1000</span><span class="p">,</span><span class="w"> 
                             </span><span class="n">max.bp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">150</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#&gt; [[1]]
#&gt; DNAStringSet object of length 98821:
#&gt;         width seq                                           names               
#&gt;     [1]   150 TTAATGGAAAGAGGAGGAGGA...TGCTTTTATTAGTTGATGTCT sequence_1
#&gt;     [2]   150 AAAATGAAAGAACAGTTAAAT...CAGGTGGGGGCCAAGCGAGAT sequence_2
#&gt;     [3]   150 GCTAGGTCAAGGTGAACACCA...GTCCCATGCCGCAAAGATGGG sequence_3
#&gt;     [4]   150 TTTATAGTCTTTAAAAAGCAG...GGATTATATGTGTGACAGTGT sequence_4
#&gt;     [5]   124 CCAACAGTAAAAACACCAAAT...CACCAGGGAGATGCAAATTAC sequence_5
#&gt;     ...   ... ...
#&gt; [98817]   150 TAGAGGATTTTTGTGAGATTA...TGGGAAGATTTTAAAATAAGC sequence_98817
#&gt; [98818]   150 GTGTGAAGGAGCTGTTGGTAA...AAGCTCCAAAAATAGTCTCAG sequence_98818
#&gt; [98819]   150 TATGGTGAAAAGAAAAGGCTT...TGGGTATCTACTCAAAGGGAA sequence_98819
#&gt; [98820]   150 TAAAACTAACTCTGAGATTAA...GCCCAGATGTCTGAAGTTGTT sequence_98820
#&gt; [98821]   150 TGTCAAGTTGAGGGGAGGAGG...ATGTTAATATCACTGAACTGT sequence_98821
#&gt; 
#&gt; [[2]]
#&gt; DNAStringSet object of length 98821:
#&gt;         width seq                                           names               
#&gt;     [1]   150 CAGAAGAGAAGGCAGTATGCT...CCCAGCCAGAAAAACACTTTA sequence_1
#&gt;     [2]   150 GCTGGCCTACCCACTGAAGGA...AAAGAGAGCTCCTAGGGGTCC sequence_2
#&gt;     [3]   150 CATTGCCTATTTTATTGTGTA...GGATTTTGATCTTTGGGATTT sequence_3
#&gt;     [4]   150 ACGTGTTCGTATTCACACTCC...CTCACTCATACACACCGATTG sequence_4
#&gt;     [5]   124 GTAATTTGCATCTCCCTGGTG...ATTTGGTGTTTTTACTGTTGG sequence_5
#&gt;     ...   ... ...
#&gt; [98817]   150 CCTACCCAGTACTAAATATAG...TCTTGTTATACTTTCTCTCCC sequence_98817
#&gt; [98818]   150 ATTAGCTGTCTTGCTCCCAAA...GCCAAAGAGGGTAAGCGTTTA sequence_98818
#&gt; [98819]   150 GCTGTGATAAACATACAAGTA...TGTTTTCCATAGAGGTTGTAC sequence_98819
#&gt; [98820]   150 CCCTAACCCCTAAACTTAACC...GACCCAATCTCTGACCCCTAA sequence_98820
#&gt; [98821]   150 TACATTTGTATGGATCCAGCA...CTCAGCCTCCTGAATAGCTGG sequence_98821
</code></pre></div></div>

<h3 id="generating-fasta-files">Generating fasta files</h3>

<p>Finally, now that your pairs have been generated, you can save the pairs
as R1 and R2 fasta files for genome alignment. The <code>compress</code>
option in <code>save_fasta()</code> will compress the fasta files to
save space. Given the input parameters below, the files will be saved as
<code>path/to/directory/prefix_R1.fa(.gz)</code> and
<code>path/to/directory/prefix_R2.fa(.gz)</code>, respectively.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">xInt</span><span class="o">::</span><span class="n">save_fasta</span><span class="p">(</span><span class="n">trimmed.seqs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">frag.trim</span><span class="p">,</span><span class="w"> 
                 </span><span class="n">directory.path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"path/to/directory"</span><span class="p">,</span><span class="w">
                 </span><span class="n">file.prefix</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"prefix"</span><span class="p">,</span><span class="w">
                 </span><span class="n">compress</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<h3 id="conclusions">Conclusions</h3>

<p>On my 2 GHz quad-core laptop with 16 GB RAM, this entire process ran in
just over 2 minutes. Obviously, as you increase the number of random
sites generated, this run time will increase. For generating extremely
large datasets, I would recommend moving this to an HPC cluster.
Regardless of where you run this, I hope I’ve demonstrated how easy it
can be to generate random genome fragments in a way that should
integrate (lol, get it?!) seamlessly with your other Bioconductor
workflows!</p>]]></content><author><name>Greg Bedwell</name><email>gregoryjbedwell@gmail.com</email></author><summary type="html"><![CDATA[Quickly and easily generating simulated random fragments of a chosen genome.]]></summary></entry></feed>